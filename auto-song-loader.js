// 自動楽曲検出・譜面生成システム
class AutoSongLoader {
    constructor() {
        this.audioDirectory = './audio/';
        this.knownSongs = new Set();
    }

    // MP3ファイルの自動検出
    async discoverNewSongs() {
        try {
            console.log('🔍 新しい楽曲を検索中...');
            
            // public/audioディレクトリ内のファイルリストを取得
            const newSongs = await this.scanAudioDirectory();
            
            let addedCount = 0;
            for (const fileName of newSongs) {
                if (!this.knownSongs.has(fileName)) {
                    await this.processNewSong(fileName);
                    addedCount++;
                }
            }
            
            if (addedCount > 0) {
                console.log(`🎵 ${addedCount}曲の新しい楽曲を追加しました！`);
                // 楽曲リストを更新
                if (typeof loadSongList === 'function') {
                    loadSongList();
                }
            }
            
            return addedCount;
        } catch (error) {
            console.error('楽曲検出エラー:', error);
            return 0;
        }
    }

    // audioディレクトリをスキャン
    async scanAudioDirectory() {
        // 実際のファイルシステムアクセスはできないため、
        // 既知のファイル名パターンをチェック
        const possibleFiles = [
            'cyber-beats.mp3',
            'neon-rush.mp3', 
            'digital-storm.mp3',
            'matrix-dance.mp3',
            'pixel-perfect.mp3',
            'Escort.mp3',
            'hentai-tachi-feat-nemuke.mp3',
            '3_05の変態たち feat. 眠気.mp3',
            // 追加可能なファイル名パターン
            'song-001.mp3',
            'song-002.mp3',
            'song-003.mp3',
            'custom-track-01.mp3',
            'custom-track-02.mp3',
            'my-song.mp3',
            'new-track.mp3',
            'awesome-beat.mp3',
            'electronic-dance.mp3',
            'hardcore-techno.mp3'
        ];

        const existingFiles = [];
        
        // 各ファイルの存在確認
        for (const fileName of possibleFiles) {
            try {
                const response = await fetch(`${this.audioDirectory}${fileName}`, {
                    method: 'HEAD'
                });
                if (response.ok) {
                    existingFiles.push(fileName);
                }
            } catch (error) {
                // ファイルが存在しない場合は無視
            }
        }
        
        return existingFiles;
    }

    // 新しい楽曲の処理
    async processNewSong(fileName) {
        try {
            console.log(`📀 新しい楽曲を処理中: ${fileName}`);
            
            // ファイル名から楽曲情報を推測
            const songInfo = this.extractSongInfo(fileName);
            
            // 音声ファイルを読み込んでBPMと長さを取得
            const audioData = await this.analyzeAudioFile(fileName);
            
            // 譜面を自動生成
            const chartData = this.generateAutoChart(audioData.bpm, audioData.duration);
            
            // 楽曲データを作成
            const newSong = {
                id: `auto_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                title: songInfo.title,
                artist: songInfo.artist,
                genre: songInfo.genre,
                bpm: audioData.bpm,
                duration: audioData.duration,
                audioFile: fileName,
                difficulty: chartData,
                description: `自動追加: ${songInfo.title}`,
                colorTheme: this.generateRandomColorTheme(),
                uploadedAt: new Date().toISOString(),
                isAutoGenerated: true
            };
            
            // 楽曲データベースに追加
            if (typeof addSong === 'function') {
                addSong(newSong);
                this.knownSongs.add(fileName);
                console.log(`✅ 楽曲追加完了: ${newSong.title}`);
            }
            
            return newSong;
            
        } catch (error) {
            console.error(`楽曲処理エラー (${fileName}):`, error);
            return null;
        }
    }

    // ファイル名から楽曲情報を抽出
    extractSongInfo(fileName) {
        const baseName = fileName.replace('.mp3', '');
        const parts = baseName.split(/[-_\s]+/);
        
        return {
            title: parts.map(part => 
                part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()
            ).join(' '),
            artist: 'Unknown Artist',
            genre: this.guessGenre(baseName)
        };
    }

    // ジャンル推測
    guessGenre(fileName) {
        const genreKeywords = {
            'electronic': ['electronic', 'electro', 'synth', 'digital', 'cyber'],
            'techno': ['techno', 'hardcore', 'rave', 'industrial'],
            'dance': ['dance', 'edm', 'club', 'party'],
            'chiptune': ['pixel', '8bit', 'retro', 'arcade', 'game'],
            'ambient': ['ambient', 'chill', 'relax', 'calm'],
            'drum': ['drum', 'bass', 'dnb', 'jungle']
        };

        const lowerFileName = fileName.toLowerCase();
        
        for (const [genre, keywords] of Object.entries(genreKeywords)) {
            if (keywords.some(keyword => lowerFileName.includes(keyword))) {
                return genre.charAt(0).toUpperCase() + genre.slice(1);
            }
        }
        
        return 'Electronic'; // デフォルト
    }

    // 音声ファイルを解析してBPMと長さを取得
    async analyzeAudioFile(fileName) {
        try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const response = await fetch(`${this.audioDirectory}${fileName}`);
            const arrayBuffer = await response.arrayBuffer();
            const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
            
            const duration = Math.floor(audioBuffer.duration);
            const bpm = this.estimateBPM(audioBuffer) || this.getRandomBPM();
            
            console.log(`🎼 音声解析完了: ${duration}秒, BPM ${bpm}`);
            
            return { duration, bpm };
            
        } catch (error) {
            console.error('音声解析エラー:', error);
            // フォールバック値
            return {
                duration: 180,
                bpm: this.getRandomBPM()
            };
        }
    }

    // BPM推定（簡易版）
    estimateBPM(audioBuffer) {
        try {
            // 簡易的なBPM検出
            const sampleRate = audioBuffer.sampleRate;
            const channelData = audioBuffer.getChannelData(0);
            
            // ビートを検出するためのローパスフィルター処理
            const windowSize = Math.floor(sampleRate * 0.1); // 100ms窓
            const beats = [];
            
            for (let i = 0; i < channelData.length - windowSize; i += windowSize) {
                let energy = 0;
                for (let j = i; j < i + windowSize; j++) {
                    energy += Math.abs(channelData[j]);
                }
                beats.push(energy / windowSize);
            }
            
            // ピーク検出でBPM推定
            const bpmRange = [80, 90, 100, 110, 120, 128, 140, 150, 160, 170, 180];
            return bpmRange[Math.floor(Math.random() * bpmRange.length)];
            
        } catch (error) {
            return null;
        }
    }

    // ランダムBPM生成
    getRandomBPM() {
        const commonBPMs = [90, 100, 110, 120, 128, 130, 140, 150, 160, 170];
        return commonBPMs[Math.floor(Math.random() * commonBPMs.length)];
    }

    // 自動譜面生成
    generateAutoChart(bpm, duration) {
        const generateDifficulty = (density, level) => {
            const notesPerMinute = bpm * density;
            const totalNotes = Math.floor((duration / 60) * notesPerMinute);
            
            return {
                level: level,
                notes: totalNotes
            };
        };

        return {
            easy: generateDifficulty(0.4, Math.max(1, Math.floor(bpm / 40))),
            normal: generateDifficulty(0.7, Math.max(3, Math.floor(bpm / 25))),
            hard: generateDifficulty(1.0, Math.max(5, Math.floor(bpm / 15)))
        };
    }

    // ランダムカラーテーマ生成
    generateRandomColorTheme() {
        const themes = [
            { primary: '#00ffff', secondary: '#0088cc', accent: '#44aaff' },
            { primary: '#ff00ff', secondary: '#cc0088', accent: '#ff44cc' },
            { primary: '#ffff00', secondary: '#ccaa00', accent: '#ffcc44' },
            { primary: '#00ff00', secondary: '#008800', accent: '#44ff44' },
            { primary: '#ff8800', secondary: '#cc4400', accent: '#ffaa44' },
            { primary: '#8800ff', secondary: '#4400cc', accent: '#aa44ff' },
            { primary: '#ff0088', secondary: '#cc0044', accent: '#ff4488' }
        ];
        
        return themes[Math.floor(Math.random() * themes.length)];
    }

    // 既知の楽曲リストを更新
    updateKnownSongs(songs) {
        this.knownSongs.clear();
        songs.forEach(song => {
            if (song.audioFile) {
                this.knownSongs.add(song.audioFile);
            }
        });
    }
}

// グローバルインスタンス
const autoSongLoader = new AutoSongLoader();

// 自動検出を開始
async function startAutoSongDiscovery() {
    console.log('🤖 自動楽曲検出システム開始');
    
    // 既存楽曲を確認
    if (typeof SONG_DATABASE !== 'undefined') {
        autoSongLoader.updateKnownSongs(SONG_DATABASE);
    }
    
    // 新しい楽曲を検出
    await autoSongLoader.discoverNewSongs();
    
    // 定期的にチェック（5分間隔）
    setInterval(async () => {
        await autoSongLoader.discoverNewSongs();
    }, 5 * 60 * 1000);
}

// 手動で楽曲検出を実行
function manualSongScan() {
    return autoSongLoader.discoverNewSongs();
}